import { BinaryMeetingTime } from "../../parsers/meetingTimes";
import { MeetingDay } from "../../types/types";
import { INTERVALS_IN_DAY, INTERVAL_LENGTH, SECONDS_IN_DAY } from "../../utils/global";
import sections from "../../parsers/tests/data/sections.data";
import { Filter, FilterBuilder } from "../filter";
import meetingTimesData from "../../parsers/tests/data/meetingTimes.data";

describe("Test start time filter", () => {
    test("Default start filter should never overlap", () => {
        const full_meeting = new BinaryMeetingTime(
            new Array(INTERVALS_IN_DAY * 7).fill(1).join("")
        );

        const filter = new FilterBuilder().build();

        expect(filter.meetingCompatible(full_meeting)).toBeTruthy();
    });

    test("No overlap whatsovever", () => {
        // 1:35 - 3:15 PM
        const meeting1 = new BinaryMeetingTime(
            "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
        );

        const filter = new FilterBuilder().setStartTime(0).setEndTime(SECONDS_IN_DAY).build();

        expect(filter.meetingCompatible(meeting1)).toBeTruthy();
    });

    test("Start time - clear overlap", () => {
        // 1:35 - 3:15 PM
        const meeting1 = new BinaryMeetingTime(

        );

        const filter = new FilterBuilder().setStartTime(50000).build();
        expect(filter.meetingCompatible(meeting1)).toBeFalsy();
    });

    test("Start time - marginal overlap", () => {
        // 1:35 - 3:15 PM
        const meeting = new BinaryMeetingTime(

        );
        const start_time = 48900;

        const filter1 = new FilterBuilder().setStartTime(start_time - INTERVAL_LENGTH).build();
        expect(filter1.meetingCompatible(meeting)).toBeTruthy();

        const filter2 = new FilterBuilder().setStartTime(start_time).build();
        expect(filter2.meetingCompatible(meeting)).toBeTruthy();

        const filter3 = new FilterBuilder().setStartTime(start_time + INTERVAL_LENGTH).build();
        expect(filter3.meetingCompatible(meeting)).toBeFalsy();
    });
});

describe("Test end time filter", () => {
    test("Default end filter should never overlap", () => {
        const full_meeting = new BinaryMeetingTime(
            new Array(INTERVALS_IN_DAY * 7).fill(1).join("")
        );

        const filter = new FilterBuilder().build();
        expect(filter.meetingCompatible(full_meeting)).toBeTruthy();
    });

    test("No overlap whatsovever", () => {
        // 1:35 - 3:15 PM
        const meeting1 = new BinaryMeetingTime(

        );

        const filter1 = new FilterBuilder().setEndTime(SECONDS_IN_DAY).build();

        expect(filter1.meetingCompatible(meeting1)).toBeTruthy();

        // The start/end dates should never matter
        const meeting2 = new BinaryMeetingTime(

        );

        const meeting3 = new BinaryMeetingTime(

        );

        expect(filter1.meetingCompatible(meeting2)).toBeTruthy();
        expect(filter1.meetingCompatible(meeting3)).toBeTruthy();
    });

    test("End time - clear overlap", () => {
        // 1:35 - 3:15 PM
        const meeting1 = new BinaryMeetingTime(
            "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
        );

        const filter1 = new FilterBuilder().setEndTime(50000).build();
        expect(filter1.meetingCompatible(meeting1)).toBeFalsy();
    });

    test("Marginal overlap", () => {
        // 1:35 - 3:15 PM
        const meeting = new BinaryMeetingTime(

        );
        const end_time = 54900;

        const filter1 = new FilterBuilder().setEndTime(end_time - INTERVAL_LENGTH).build();
        expect(filter1.meetingCompatible(meeting)).toBeFalsy();

        const filter2 = new FilterBuilder().setEndTime(end_time).build();
        expect(filter2.meetingCompatible(meeting)).toBeTruthy();

        const filter3 = new FilterBuilder().setEndTime(end_time + INTERVAL_LENGTH).build();
        expect(filter3.meetingCompatible(meeting)).toBeTruthy();
    });
});

describe("Test SPECIFIC days free", () => {
    test("No days off", () => {
        const tues_fri = new BinaryMeetingTime(

        );

        const filter_no_days_off = new FilterBuilder().setSpecificDaysFree([]).build();
        expect(filter_no_days_off.meetingCompatible(tues_fri)).toBeTruthy();
    });

    test("All days off", () => {
        const tues_fri = new BinaryMeetingTime(

        );

        const filter_no_days_off = new FilterBuilder()
            .setSpecificDaysFree([
                MeetingDay.SUNDAY,
                MeetingDay.MONDAY,
                MeetingDay.TUESDAY,
                MeetingDay.WEDNESDAY,
                MeetingDay.THURSDAY,
                MeetingDay.FRIDAY,
                MeetingDay.SATURDAY,
            ])
            .build();
        expect(filter_no_days_off.meetingCompatible(tues_fri)).toBeFalsy();

        const mon = new BinaryMeetingTime(

        );
        expect(filter_no_days_off.meetingCompatible(mon)).toBeFalsy();
    });

    test("Overlap", () => {
        const tues_fri = new BinaryMeetingTime(

        );

        const filter_tues_fri = new FilterBuilder()
            .setSpecificDaysFree([MeetingDay.TUESDAY, MeetingDay.FRIDAY])
            .build();

        expect(filter_tues_fri.meetingCompatible(tues_fri)).toBeFalsy();

        const filter_tues = new FilterBuilder().setSpecificDaysFree([MeetingDay.TUESDAY]).build();
        expect(filter_tues.meetingCompatible(tues_fri)).toBeFalsy();

        const mon = new BinaryMeetingTime(

        );
        const filter_mon = new FilterBuilder().setSpecificDaysFree([MeetingDay.MONDAY]).build();
        expect(filter_mon.meetingCompatible(mon)).toBeFalsy();
    });

    test("No overlap", () => {
        const tues_fri = new BinaryMeetingTime(

        );

        const filter_mon_sat = new FilterBuilder()
            .setSpecificDaysFree([MeetingDay.MONDAY, MeetingDay.SATURDAY])
            .build();
        expect(filter_mon_sat.meetingCompatible(tues_fri)).toBeTruthy();

        const filter_sat = new FilterBuilder().setSpecificDaysFree([MeetingDay.SATURDAY]).build();
        expect(filter_sat.meetingCompatible(tues_fri)).toBeTruthy();

        const mon = new BinaryMeetingTime(

        );
        const filter_tues = new FilterBuilder().setSpecificDaysFree([MeetingDay.TUESDAY]).build();
        expect(filter_tues.meetingCompatible(mon)).toBeTruthy();
    });
});

describe("Test the min. number of seats left", () => {
    const zero_seats = sections.cs3001_202210_1_parsed();
    const one_seat = sections.cs3001_202210_3_parsed();
    const four_seats = sections.cs3001_202210_4_parsed();
    const ten_seats = sections.cs3001_202210_5_parsed();
    // A section with a billion seats (just for shits and giggles)
    const billion_seats = sections.cs3001_202210_7_parsed();

    test("Ensure the default doesn't filter any", () => {
        const filter = new FilterBuilder().build();

        expect(filter.sectionCompatible(zero_seats)).toBeTruthy();
        expect(filter.sectionCompatible(one_seat)).toBeTruthy();
        expect(filter.sectionCompatible(four_seats)).toBeTruthy();
        expect(filter.sectionCompatible(ten_seats)).toBeTruthy();
        expect(filter.sectionCompatible(billion_seats)).toBeTruthy();
    });

    test("No overlap (ie. all sections pass)", () => {
        const filter = new FilterBuilder().setSeatsLeft(4).build();

        expect(filter.sectionCompatible(four_seats)).toBeTruthy();
        expect(filter.sectionCompatible(ten_seats)).toBeTruthy();
        expect(filter.sectionCompatible(billion_seats)).toBeTruthy();
    });

    test("Overlap (ie. some sections don't pass)", () => {
        const filter = new FilterBuilder().setSeatsLeft(5).build();

        expect(filter.sectionCompatible(zero_seats)).toBeFalsy();
        expect(filter.sectionCompatible(one_seat)).toBeFalsy();
        expect(filter.sectionCompatible(four_seats)).toBeFalsy();
        expect(filter.sectionCompatible(ten_seats)).toBeTruthy();
        expect(filter.sectionCompatible(billion_seats)).toBeTruthy();
    });

    test("Full overlap - NOTHING should pass", () => {
        const filter = new FilterBuilder().setSeatsLeft(Number.MAX_SAFE_INTEGER).build();

        expect(filter.sectionCompatible(zero_seats)).toBeFalsy();
        expect(filter.sectionCompatible(one_seat)).toBeFalsy();
        expect(filter.sectionCompatible(four_seats)).toBeFalsy();
        expect(filter.sectionCompatible(ten_seats)).toBeFalsy();
        expect(filter.sectionCompatible(billion_seats)).toBeFalsy();
    });
});

describe("Test NUMBER OF days free", () => {
    const mon = sections.cs3001_202210_7_parsed();
    const mon_wed_thu = sections.cs2800_202210_1_parsed();
    const fri = sections.cs2801_202210_1_parsed();
    const tue = sections.eece2323_202210_2_parsed();
    const tue_thu = sections.cs4850_202210_1_parsed();

    test("Ensure the default doesn't filter anything out", () => {
        const filter = new FilterBuilder().build();

        expect(filter.resultCompatible([])).toBeTruthy();
        expect(filter.resultCompatible([mon])).toBeTruthy();
        expect(filter.resultCompatible([mon, mon_wed_thu])).toBeTruthy();
        expect(filter.resultCompatible([mon, mon_wed_thu, fri])).toBeTruthy();
        expect(filter.resultCompatible([mon, mon_wed_thu, fri, tue])).toBeTruthy();
        expect(filter.resultCompatible([mon, mon_wed_thu, fri, tue, tue_thu])).toBeTruthy();
    });

    test("All days off", () => {
        const filter = new FilterBuilder().setMinDaysFree(7).build();

        expect(filter.resultCompatible([])).toBeTruthy();
        expect(filter.resultCompatible([mon])).toBeFalsy();
        expect(filter.resultCompatible([mon, mon_wed_thu])).toBeFalsy();
        expect(filter.resultCompatible([mon, mon_wed_thu, fri])).toBeFalsy();
        expect(filter.resultCompatible([mon, mon_wed_thu, fri, tue])).toBeFalsy();
        expect(filter.resultCompatible([mon, mon_wed_thu, fri, tue, tue_thu])).toBeFalsy();
    });

    test("3 days off, no overlapping", () => {
        const filter = new FilterBuilder().setMinDaysFree(3).build();
        expect(filter.resultCompatible([])).toBeTruthy();
        expect(filter.resultCompatible([mon_wed_thu])).toBeTruthy();
        expect(filter.resultCompatible([mon_wed_thu, fri])).toBeTruthy();
        expect(filter.resultCompatible([mon_wed_thu, fri, tue])).toBeFalsy();
        expect(filter.resultCompatible([mon_wed_thu, fri, tue_thu])).toBeFalsy();
    });

    test("Multiple days off, overlapping (same day only counts once)", () => {
        const filter = new FilterBuilder().setMinDaysFree(3).build();

        expect(filter.resultCompatible([])).toBeTruthy();
        expect(filter.resultCompatible([mon_wed_thu])).toBeTruthy();
        expect(filter.resultCompatible([mon_wed_thu, mon])).toBeTruthy();
        expect(filter.resultCompatible([tue_thu, tue, mon_wed_thu])).toBeTruthy();
        expect(filter.resultCompatible([tue_thu, tue, mon_wed_thu, mon])).toBeTruthy();
        expect(filter.resultCompatible([tue_thu, tue, mon_wed_thu, mon, fri])).toBeFalsy();
    });
});

describe("Test number of honors courses", () => {
    const honr_1 = sections.cs3000_202210_1_parsed();
    const honr_2 = sections.cs3800_202210_2_parsed();
    const honr_3 = sections.cs3001_202210_1_parsed();

    const non_honr_1 = sections.cs3000_202210_2_parsed();
    const non_honr_2 = sections.cs3800_202210_1_parsed();
    const non_honr_3 = sections.cs3001_202210_2_parsed();
    const non_honr_4 = sections.cs3001_202210_3_parsed();

    test("Ensure the default doesn't filter any", () => {
        const filter = new FilterBuilder().build();

        expect(filter.resultCompatible([])).toBeTruthy();
        expect(filter.resultCompatible([honr_1])).toBeTruthy();
        expect(filter.resultCompatible([honr_1, non_honr_1])).toBeTruthy();
        expect(filter.resultCompatible([non_honr_1])).toBeTruthy();
        expect(filter.resultCompatible([honr_2, non_honr_1, non_honr_2])).toBeTruthy();
        expect(
            filter.resultCompatible([non_honr_1, non_honr_2, non_honr_3, non_honr_4])
        ).toBeTruthy();
        expect(filter.resultCompatible([honr_1, honr_2, honr_3])).toBeTruthy();
    });

    test("Only one honors course", () => {
        const filter = new FilterBuilder().setMinHonorsCourses(1).build();

        expect(filter.resultCompatible([])).toBeFalsy();
        expect(filter.resultCompatible([honr_1])).toBeTruthy();
        expect(filter.resultCompatible([honr_1, non_honr_1])).toBeTruthy();
        expect(filter.resultCompatible([non_honr_1])).toBeFalsy();
        expect(filter.resultCompatible([honr_2, non_honr_1, non_honr_2])).toBeTruthy();
        expect(
            filter.resultCompatible([non_honr_1, non_honr_2, non_honr_3, non_honr_4])
        ).toBeFalsy();
        expect(filter.resultCompatible([honr_1, honr_2, honr_3])).toBeTruthy();
    });

    test("Multiple honors courses", () => {
        const filter = new FilterBuilder().setMinHonorsCourses(2).build();

        expect(filter.resultCompatible([])).toBeFalsy();
        expect(filter.resultCompatible([honr_1])).toBeFalsy();
        expect(filter.resultCompatible([honr_1, non_honr_1])).toBeFalsy();
        expect(filter.resultCompatible([non_honr_1])).toBeFalsy();
        expect(filter.resultCompatible([honr_2, non_honr_1, non_honr_2])).toBeFalsy();
        expect(
            filter.resultCompatible([non_honr_1, non_honr_2, non_honr_3, non_honr_4])
        ).toBeFalsy();
        expect(filter.resultCompatible([honr_1, honr_2])).toBeTruthy();
        expect(filter.resultCompatible([honr_1, honr_2, honr_3])).toBeTruthy();
    });
});

describe("Combined filters", () => {
    test("Start & end time, both set, no conflict", () => {
        const filter = new FilterBuilder().setStartTime(48000).setEndTime(62000).build();

        expect(
            filter.resultCompatible([
                sections.cs3000_202210_1_parsed(),
                sections.cs3800_202210_1_parsed(),
            ])
        ).toBeTruthy();
    });

    test("Start and end, both set, conflict", () => {
        const filter = new FilterBuilder().setStartTime(48000).setEndTime(50000).build();

        expect(
            filter.resultCompatible([
                sections.cs3000_202210_1_parsed(),
                sections.cs3800_202210_1_parsed(),
            ])
        ).toBeFalsy();
    });

    test("Days free, both set, no conflict", () => {
        const filter = new FilterBuilder()
            .setMinDaysFree(3)
            .setSpecificDaysFree([MeetingDay.MONDAY, MeetingDay.WEDNESDAY])
            .build();

        expect(
            filter.resultCompatible([
                sections.cs3000_202210_1_parsed(),
                sections.cs3800_202210_1_parsed(),
            ])
        ).toBeTruthy();
    });

    test("Days free, number not set, no conflict", () => {
        const filter = new FilterBuilder()
            .setSpecificDaysFree([
                MeetingDay.SUNDAY,
                MeetingDay.MONDAY,
                MeetingDay.WEDNESDAY,
                MeetingDay.THURSDAY,
                MeetingDay.SATURDAY,
            ])
            .build();

        expect(
            filter.resultCompatible([
                sections.cs3000_202210_1_parsed(),
                sections.cs3800_202210_1_parsed(),
            ])
        ).toBeTruthy();
    });

    test("Days free, number set and less than specific days", () => {
        const filter = new FilterBuilder()
            .setSpecificDaysFree([
                MeetingDay.SUNDAY,
                MeetingDay.MONDAY,
                MeetingDay.WEDNESDAY,
                MeetingDay.THURSDAY,
                MeetingDay.SATURDAY,
            ])
            .setMinDaysFree(3)
            .build();

        expect(
            filter.resultCompatible([
                sections.cs3000_202210_1_parsed(),
                sections.cs3800_202210_1_parsed(),
            ])
        ).toBeTruthy();
    });

    test("Days free, number set and greater than specific days", () => {
        const filter = new FilterBuilder()
            .setSpecificDaysFree([
                MeetingDay.SUNDAY,
                MeetingDay.TUESDAY,
                MeetingDay.WEDNESDAY,
                MeetingDay.THURSDAY,
                MeetingDay.SATURDAY,
            ])
            .setMinDaysFree(6)
            .build();

        expect(
            filter.resultCompatible([
                sections.cs3000_202210_1_parsed(),
                sections.cs3800_202210_1_parsed(),
            ])
        ).toBeFalsy();
    });

    test("Seats left & honors courses, no conflict", () => {
        const filter = new FilterBuilder().setSeatsLeft(2).setMinHonorsCourses(1).build();

        expect(
            filter.resultCompatible([
                sections.cs3000_202210_1_parsed(),
                sections.cs3800_202210_1_parsed(),
            ])
        ).toBeTruthy();
    });

    test("Seats left & honors courses, conflict", () => {
        const filter = new FilterBuilder().setSeatsLeft(2).setMinHonorsCourses(2).build();

        expect(
            filter.resultCompatible([
                sections.cs3000_202210_1_parsed(),
                sections.cs3800_202210_1_parsed(),
            ])
        ).toBeFalsy();
    });
});

describe("Day compatibility", () => {
    test("No overlap", () => {
        const no_days = new FilterBuilder().build();
        const mon_wed = new FilterBuilder()
            .setSpecificDaysFree([MeetingDay.MONDAY, MeetingDay.WEDNESDAY])
            .build();

        expect(
            no_days.daysCompatible(
                new Set<MeetingDay>([
                    MeetingDay.SUNDAY,
                    MeetingDay.MONDAY,
                    MeetingDay.TUESDAY,
                    MeetingDay.WEDNESDAY,
                    MeetingDay.THURSDAY,
                    MeetingDay.FRIDAY,
                    MeetingDay.SATURDAY,
                ])
            )
        ).toBeTruthy();

        expect(
            mon_wed.daysCompatible(
                new Set<MeetingDay>([
                    MeetingDay.SUNDAY,
                    MeetingDay.TUESDAY,
                    MeetingDay.THURSDAY,
                    MeetingDay.FRIDAY,
                    MeetingDay.SATURDAY,
                ])
            )
        ).toBeTruthy();
    });

    test("Overlap", () => {
        const all_days = new FilterBuilder()
            .setSpecificDaysFree([
                MeetingDay.SUNDAY,
                MeetingDay.MONDAY,
                MeetingDay.TUESDAY,
                MeetingDay.WEDNESDAY,
                MeetingDay.THURSDAY,
                MeetingDay.FRIDAY,
                MeetingDay.SATURDAY,
            ])
            .build();
        const mon_wed = new FilterBuilder()
            .setSpecificDaysFree([MeetingDay.MONDAY, MeetingDay.WEDNESDAY])
            .build();

        expect(
            all_days.daysCompatible(
                new Set<MeetingDay>([
                    MeetingDay.SUNDAY,
                    MeetingDay.MONDAY,
                    MeetingDay.TUESDAY,
                    MeetingDay.WEDNESDAY,
                    MeetingDay.THURSDAY,
                    MeetingDay.FRIDAY,
                    MeetingDay.SATURDAY,
                ])
            )
        ).toBeFalsy();

        expect(all_days.daysCompatible(new Set<MeetingDay>([MeetingDay.SUNDAY]))).toBeFalsy();

        expect(all_days.daysCompatible(new Set<MeetingDay>([MeetingDay.SATURDAY]))).toBeFalsy();

        expect(
            mon_wed.daysCompatible(
                new Set<MeetingDay>([
                    MeetingDay.MONDAY,
                    MeetingDay.TUESDAY,
                    MeetingDay.THURSDAY,
                    MeetingDay.FRIDAY,
                    MeetingDay.SATURDAY,
                ])
            )
        ).toBeFalsy();

        expect(mon_wed.daysCompatible(new Set<MeetingDay>([MeetingDay.MONDAY]))).toBeFalsy();
    });
});
