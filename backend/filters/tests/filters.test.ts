import { BinaryMeetingTime } from "../../types/meetingTimes";
import { MeetingDay } from "../../types/types";
import {
  INTERVALS_IN_DAY,
  INTERVAL_LENGTH,
  SECONDS_IN_DAY,
} from "../../utils/global";
import sections from "../../api_outgoing/parsers/tests/data/sections.data";
import { FilterBuilder } from "../filter";

describe("Test start time filter", () => {
  test("Default start filter should never overlap", () => {
    const full_meeting = new BinaryMeetingTime(
      18878,
      18969,
      new Array(INTERVALS_IN_DAY * 7).fill(1).join(""),
      new Set()
    );

    const filter = new FilterBuilder().build();
    expect(full_meeting.compatibleWithFilter(filter)).toBeTruthy();
  });

  test("No overlap whatsovever", () => {
    // 1:35 - 3:15 PM
    const meeting1 = new BinaryMeetingTime(
      18878,
      18969,

      new Set()
    );

    const filter1 = new FilterBuilder()
      .setStartTime(0)
      .setEndTime(SECONDS_IN_DAY)
      .build();

    expect(meeting1.compatibleWithFilter(filter1)).toBeTruthy();

    // The start/end dates should never matter
    const meeting2 = new BinaryMeetingTime(
      0,
      1,

      new Set()
    );

    const meeting3 = new BinaryMeetingTime(
      999999999,
      9999999999,

      new Set()
    );

    expect(meeting2.compatibleWithFilter(filter1)).toBeTruthy();
    expect(meeting3.compatibleWithFilter(filter1)).toBeTruthy();
  });

  test("Start time - clear overlap", () => {
    // 1:35 - 3:15 PM
    const meeting1 = new BinaryMeetingTime(
      18878,
      18969,

      new Set()
    );

    const filter1 = new FilterBuilder().setStartTime(50000).build();
    expect(meeting1.compatibleWithFilter(filter1)).toBeFalsy();
  });

  test("Start time - marginal overlap", () => {
    // 1:35 - 3:15 PM
    const meeting = new BinaryMeetingTime(
      18878,
      18969,

      new Set()
    );
    const start_time = 48900;

    const filter1 = new FilterBuilder()
      .setStartTime(start_time - INTERVAL_LENGTH)
      .build();
    expect(meeting.compatibleWithFilter(filter1)).toBeTruthy();

    const filter2 = new FilterBuilder().setStartTime(start_time).build();
    expect(meeting.compatibleWithFilter(filter2)).toBeTruthy();

    const filter3 = new FilterBuilder()
      .setStartTime(start_time + INTERVAL_LENGTH)
      .build();
    expect(meeting.compatibleWithFilter(filter3)).toBeFalsy();
  });
});

describe("Test end time filter", () => {
  test("Default end filter should never overlap", () => {
    const full_meeting = new BinaryMeetingTime(
      18878,
      18969,
      new Array(INTERVALS_IN_DAY * 7).fill(1).join(""),
      new Set()
    );

    const filter = new FilterBuilder().build();
    expect(full_meeting.compatibleWithFilter(filter)).toBeTruthy();
  });

  test("No overlap whatsovever", () => {
    // 1:35 - 3:15 PM
    const meeting1 = new BinaryMeetingTime(
      18878,
      18969,

      new Set()
    );

    const filter1 = new FilterBuilder().setEndTime(SECONDS_IN_DAY).build();

    expect(meeting1.compatibleWithFilter(filter1)).toBeTruthy();

    // The start/end dates should never matter
    const meeting2 = new BinaryMeetingTime(
      0,
      1,

      new Set()
    );

    const meeting3 = new BinaryMeetingTime(
      999999999,
      9999999999,

      new Set()
    );

    expect(meeting2.compatibleWithFilter(filter1)).toBeTruthy();
    expect(meeting3.compatibleWithFilter(filter1)).toBeTruthy();
  });

  test("End time - clear overlap", () => {
    // 1:35 - 3:15 PM
    const meeting1 = new BinaryMeetingTime(
      18878,
      18969,

      new Set()
    );

    const filter1 = new FilterBuilder().setEndTime(50000).build();
    expect(meeting1.compatibleWithFilter(filter1)).toBeFalsy();
  });

  test("Marginal overlap", () => {
    // 1:35 - 3:15 PM
    const meeting = new BinaryMeetingTime(
      18878,
      18969,

      new Set()
    );
    const end_time = 54900;

    const filter1 = new FilterBuilder()
      .setEndTime(end_time - INTERVAL_LENGTH)
      .build();
    expect(meeting.compatibleWithFilter(filter1)).toBeFalsy();

    const filter2 = new FilterBuilder().setEndTime(end_time).build();
    expect(meeting.compatibleWithFilter(filter2)).toBeTruthy();

    const filter3 = new FilterBuilder()
      .setEndTime(end_time + INTERVAL_LENGTH)
      .build();
    expect(meeting.compatibleWithFilter(filter3)).toBeTruthy();
  });
});

describe("Test SPECIFIC days free", () => {
  test("No days off", () => {
    const tues_fri = new BinaryMeetingTime(
      18878,
      18969,
      "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      new Set()
    );

    const filter_no_days_off = new FilterBuilder()
      .setSpecificDaysFree([])
      .build();
    expect(tues_fri.compatibleWithFilter(filter_no_days_off)).toBeTruthy();
  });

  test("All days off", () => {
    const tues_fri = new BinaryMeetingTime(
      18878,
      18969,

      new Set()
    );

    const filter_no_days_off = new FilterBuilder()
      .setSpecificDaysFree([
        MeetingDay.SUNDAY,
        MeetingDay.MONDAY,
        MeetingDay.TUESDAY,
        MeetingDay.WEDNESDAY,
        MeetingDay.THURSDAY,
        MeetingDay.FRIDAY,
        MeetingDay.SATURDAY,
      ])
      .build();
    expect(tues_fri.compatibleWithFilter(filter_no_days_off)).toBeFalsy();

    const mon = new BinaryMeetingTime(
      18878,
      18969,

      new Set()
    );
    expect(mon.compatibleWithFilter(filter_no_days_off)).toBeFalsy();
  });

  test("Overlap", () => {
    const tues_fri = new BinaryMeetingTime(
      18878,
      18969,

      new Set()
    );

    const filter_tues_fri = new FilterBuilder()
      .setSpecificDaysFree([MeetingDay.TUESDAY, MeetingDay.FRIDAY])
      .build();

    expect(tues_fri.compatibleWithFilter(filter_tues_fri)).toBeFalsy();

    const filter_tues = new FilterBuilder()
      .setSpecificDaysFree([MeetingDay.TUESDAY])
      .build();
    expect(tues_fri.compatibleWithFilter(filter_tues)).toBeFalsy();

    const mon = new BinaryMeetingTime(
      18878,
      18969,

      new Set()
    );
    const filter_mon = new FilterBuilder()
      .setSpecificDaysFree([MeetingDay.MONDAY])
      .build();
    expect(mon.compatibleWithFilter(filter_mon)).toBeFalsy();
  });

  test("No overlap", () => {
    const tues_fri = new BinaryMeetingTime(
      18878,
      18969,

      new Set()
    );

    const filter_mon_sat = new FilterBuilder()
      .setSpecificDaysFree([MeetingDay.MONDAY, MeetingDay.SATURDAY])
      .build();
    expect(tues_fri.compatibleWithFilter(filter_mon_sat)).toBeTruthy();

    const filter_sat = new FilterBuilder()
      .setSpecificDaysFree([MeetingDay.SATURDAY])
      .build();
    expect(tues_fri.compatibleWithFilter(filter_sat)).toBeTruthy();

    const mon = new BinaryMeetingTime(
      18878,
      18969,

      new Set()
    );
    const filter_tues = new FilterBuilder()
      .setSpecificDaysFree([MeetingDay.TUESDAY])
      .build();
    expect(mon.compatibleWithFilter(filter_tues)).toBeTruthy();
  });
});

describe("Test the min. number of seats left", () => {
  const zero_seats = sections.cs3001_202210_1_parsed();
  const one_seat = sections.cs3001_202210_3_parsed();
  const four_seats = sections.cs3001_202210_4_parsed();
  const ten_seats = sections.cs3001_202210_5_parsed();
  // A section with a billion seats (just for shits and giggles)
  const billion_seats = sections.cs3001_202210_7_parsed();

  test("Ensure the default doesn't filter any", () => {
    const filter = new FilterBuilder().build();

    expect(filter.checkSectionCompatibility(zero_seats)).toBeTruthy();
    expect(filter.checkSectionCompatibility(one_seat)).toBeTruthy();
    expect(filter.checkSectionCompatibility(four_seats)).toBeTruthy();
    expect(filter.checkSectionCompatibility(ten_seats)).toBeTruthy();
    expect(filter.checkSectionCompatibility(billion_seats)).toBeTruthy();
  });

  test("No overlap (ie. all sections pass)", () => {
    const filter = new FilterBuilder().setSeatsLeft(4).build();

    expect(filter.checkSectionCompatibility(four_seats)).toBeTruthy();
    expect(filter.checkSectionCompatibility(ten_seats)).toBeTruthy();
    expect(filter.checkSectionCompatibility(billion_seats)).toBeTruthy();
  });

  test("Overlap (ie. some sections don't pass)", () => {
    const filter = new FilterBuilder().setSeatsLeft(5).build();

    expect(filter.checkSectionCompatibility(zero_seats)).toBeFalsy();
    expect(filter.checkSectionCompatibility(one_seat)).toBeFalsy();
    expect(filter.checkSectionCompatibility(four_seats)).toBeFalsy();
    expect(filter.checkSectionCompatibility(ten_seats)).toBeTruthy();
    expect(filter.checkSectionCompatibility(billion_seats)).toBeTruthy();
  });

  test("Full overlap - NOTHING should pass", () => {
    const filter = new FilterBuilder()
      .setSeatsLeft(Number.MAX_SAFE_INTEGER)
      .build();

    expect(filter.checkSectionCompatibility(zero_seats)).toBeFalsy();
    expect(filter.checkSectionCompatibility(one_seat)).toBeFalsy();
    expect(filter.checkSectionCompatibility(four_seats)).toBeFalsy();
    expect(filter.checkSectionCompatibility(ten_seats)).toBeFalsy();
    expect(filter.checkSectionCompatibility(billion_seats)).toBeFalsy();
  });
});

describe("Test NUMBER OF days free", () => {
  const mon = sections.cs3001_202210_7_parsed();
  const mon_wed_thu = sections.cs2800_202210_1_parsed();
  const fri = sections.cs2801_202210_1_parsed();
  const tue = sections.eece2323_202210_2_parsed();
  const tue_thu = sections.cs4850_202210_1_parsed();

  test("Ensure the default doesn't filter anything out", () => {
    const filter = new FilterBuilder().build();

    expect(filter.checkCompatibility([])).toBeTruthy();
    expect(filter.checkCompatibility([mon])).toBeTruthy();
    expect(filter.checkCompatibility([mon, mon_wed_thu])).toBeTruthy();
    expect(filter.checkCompatibility([mon, mon_wed_thu, fri])).toBeTruthy();
    expect(
      filter.checkCompatibility([mon, mon_wed_thu, fri, tue])
    ).toBeTruthy();
    expect(
      filter.checkCompatibility([mon, mon_wed_thu, fri, tue, tue_thu])
    ).toBeTruthy();
  });

  test("All days off", () => {
    const filter = new FilterBuilder().setMinDaysFree(7).build();

    expect(filter.checkCompatibility([])).toBeTruthy();
    expect(filter.checkCompatibility([mon])).toBeFalsy();
    expect(filter.checkCompatibility([mon, mon_wed_thu])).toBeFalsy();
    expect(filter.checkCompatibility([mon, mon_wed_thu, fri])).toBeFalsy();
    expect(filter.checkCompatibility([mon, mon_wed_thu, fri, tue])).toBeFalsy();
    expect(
      filter.checkCompatibility([mon, mon_wed_thu, fri, tue, tue_thu])
    ).toBeFalsy();
  });

  test("3 days off, no overlapping", () => {
    const filter = new FilterBuilder().setMinDaysFree(3).build();
    expect(filter.checkCompatibility([])).toBeTruthy();
    expect(filter.checkCompatibility([mon_wed_thu])).toBeTruthy();
    expect(filter.checkCompatibility([mon_wed_thu, fri])).toBeTruthy();
    expect(filter.checkCompatibility([mon_wed_thu, fri, tue])).toBeFalsy();
    expect(filter.checkCompatibility([mon_wed_thu, fri, tue_thu])).toBeFalsy();
  });

  test("Multiple days off, overlapping (same day only counts once)", () => {
    const filter = new FilterBuilder().setMinDaysFree(3).build();

    expect(filter.checkCompatibility([])).toBeTruthy();
    expect(filter.checkCompatibility([mon_wed_thu])).toBeTruthy();
    expect(filter.checkCompatibility([mon_wed_thu, mon])).toBeTruthy();
    expect(filter.checkCompatibility([tue_thu, tue, mon_wed_thu])).toBeTruthy();
    expect(
      filter.checkCompatibility([tue_thu, tue, mon_wed_thu, mon])
    ).toBeTruthy();
    expect(
      filter.checkCompatibility([tue_thu, tue, mon_wed_thu, mon, fri])
    ).toBeFalsy();
  });
});

describe("Test number of honors courses", () => {
  const honr_1 = sections.cs3000_202210_1_parsed();
  const honr_2 = sections.cs3800_202210_2_parsed();
  const honr_3 = sections.cs3001_202210_1_parsed();

  const non_honr_1 = sections.cs3000_202210_2_parsed();
  const non_honr_2 = sections.cs3800_202210_1_parsed();
  const non_honr_3 = sections.cs3001_202210_2_parsed();
  const non_honr_4 = sections.cs3001_202210_3_parsed();

  test("Ensure the default doesn't filter any", () => {
    const filter = new FilterBuilder().build();

    expect(filter.checkCompatibility([])).toBeTruthy();
    expect(filter.checkCompatibility([honr_1])).toBeTruthy();
    expect(filter.checkCompatibility([honr_1, non_honr_1])).toBeTruthy();
    expect(filter.checkCompatibility([non_honr_1])).toBeTruthy();
    expect(
      filter.checkCompatibility([honr_2, non_honr_1, non_honr_2])
    ).toBeTruthy();
    expect(
      filter.checkCompatibility([
        non_honr_1,
        non_honr_2,
        non_honr_3,
        non_honr_4,
      ])
    ).toBeTruthy();
    expect(filter.checkCompatibility([honr_1, honr_2, honr_3])).toBeTruthy();
  });

  test("Only one honors course", () => {
    const filter = new FilterBuilder().setMinHonorsCourses(1).build();

    expect(filter.checkCompatibility([])).toBeFalsy();
    expect(filter.checkCompatibility([honr_1])).toBeTruthy();
    expect(filter.checkCompatibility([honr_1, non_honr_1])).toBeTruthy();
    expect(filter.checkCompatibility([non_honr_1])).toBeFalsy();
    expect(
      filter.checkCompatibility([honr_2, non_honr_1, non_honr_2])
    ).toBeTruthy();
    expect(
      filter.checkCompatibility([
        non_honr_1,
        non_honr_2,
        non_honr_3,
        non_honr_4,
      ])
    ).toBeFalsy();
    expect(filter.checkCompatibility([honr_1, honr_2, honr_3])).toBeTruthy();
  });

  test("Multiple honors courses", () => {
    const filter = new FilterBuilder().setMinHonorsCourses(2).build();

    expect(filter.checkCompatibility([])).toBeFalsy();
    expect(filter.checkCompatibility([honr_1])).toBeFalsy();
    expect(filter.checkCompatibility([honr_1, non_honr_1])).toBeFalsy();
    expect(filter.checkCompatibility([non_honr_1])).toBeFalsy();
    expect(
      filter.checkCompatibility([honr_2, non_honr_1, non_honr_2])
    ).toBeFalsy();
    expect(
      filter.checkCompatibility([
        non_honr_1,
        non_honr_2,
        non_honr_3,
        non_honr_4,
      ])
    ).toBeFalsy();
    expect(filter.checkCompatibility([honr_1, honr_2])).toBeTruthy();
    expect(filter.checkCompatibility([honr_1, honr_2, honr_3])).toBeTruthy();
  });
});

describe("Combined filters", () => {
  test("Start & end time, both set, no conflict", () => {
    const filter = new FilterBuilder()
      .setStartTime(48000)
      .setEndTime(62000)
      .build();

    expect(
      filter.checkCompatibility([
        sections.cs3000_202210_1_parsed(),
        sections.cs3800_202210_1_parsed(),
      ])
    ).toBeTruthy();
  });

  test("Start and end, both set, conflict", () => {
    const filter = new FilterBuilder()
      .setStartTime(48000)
      .setEndTime(50000)
      .build();

    expect(
      filter.checkCompatibility([
        sections.cs3000_202210_1_parsed(),
        sections.cs3800_202210_1_parsed(),
      ])
    ).toBeFalsy();
  });

  test("Days free, both set, no conflict", () => {
    const filter = new FilterBuilder()
      .setMinDaysFree(3)
      .setSpecificDaysFree([MeetingDay.MONDAY, MeetingDay.WEDNESDAY])
      .build();

    expect(
      filter.checkCompatibility([
        sections.cs3000_202210_1_parsed(),
        sections.cs3800_202210_1_parsed(),
      ])
    ).toBeTruthy();
  });

  test("Days free, number not set, no conflict", () => {
    const filter = new FilterBuilder()
      .setSpecificDaysFree([
        MeetingDay.SUNDAY,
        MeetingDay.MONDAY,
        MeetingDay.WEDNESDAY,
        MeetingDay.THURSDAY,
        MeetingDay.SATURDAY,
      ])
      .build();

    expect(
      filter.checkCompatibility([
        sections.cs3000_202210_1_parsed(),
        sections.cs3800_202210_1_parsed(),
      ])
    ).toBeTruthy();
  });

  test("Days free, number set and less than specific days", () => {
    const filter = new FilterBuilder()
      .setSpecificDaysFree([
        MeetingDay.SUNDAY,
        MeetingDay.MONDAY,
        MeetingDay.WEDNESDAY,
        MeetingDay.THURSDAY,
        MeetingDay.SATURDAY,
      ])
      .setMinDaysFree(3)
      .build();

    expect(
      filter.checkCompatibility([
        sections.cs3000_202210_1_parsed(),
        sections.cs3800_202210_1_parsed(),
      ])
    ).toBeTruthy();
  });

  test("Days free, number set and greater than specific days", () => {
    const filter = new FilterBuilder()
      .setSpecificDaysFree([
        MeetingDay.SUNDAY,
        MeetingDay.TUESDAY,
        MeetingDay.WEDNESDAY,
        MeetingDay.THURSDAY,
        MeetingDay.SATURDAY,
      ])
      .setMinDaysFree(6)
      .build();

    expect(
      filter.checkCompatibility([
        sections.cs3000_202210_1_parsed(),
        sections.cs3800_202210_1_parsed(),
      ])
    ).toBeFalsy();
  });

  test("Seats left & honors courses, no conflict", () => {
    const filter = new FilterBuilder()
      .setSeatsLeft(2)
      .setMinHonorsCourses(1)
      .build();

    expect(
      filter.checkCompatibility([
        sections.cs3000_202210_1_parsed(),
        sections.cs3800_202210_1_parsed(),
      ])
    ).toBeTruthy();
  });

  test("Seats left & honors courses, conflict", () => {
    const filter = new FilterBuilder()
      .setSeatsLeft(2)
      .setMinHonorsCourses(2)
      .build();

    expect(
      filter.checkCompatibility([
        sections.cs3000_202210_1_parsed(),
        sections.cs3800_202210_1_parsed(),
      ])
    ).toBeFalsy();
  });
});
