import { BinaryMeetingTime, Section } from "../../../../types/types";

export default {
    algo1() {
      return {...this.algo1_base};
    },
    algo1_base: {
      classType: "Lecture",
      crn: "14087",
      seatsCapacity: 114,
      seatsRemaining: 2,
      waitCapacity: 0,
      waitRemaining: 0,
      lastUpdateTime: 1638994699283,
      campus: "Boston",
      honors: false,
      url: "https://wl11gp.neu.edu/udcprod8/bwckschd.p_disp_detail_sched?term_in=202210&crn_in=14087",
      profs: ["Andrew Van Der Poel"],
      meetings: [
        {
          type: "Final Exam",
          times: {
            "2": [
              {
                end: 54000,
                start: 46800,
              },
            ],
          },
          where: "TBA",
          endDate: 18975,
          startDate: 18975,
        },
        {
          type: "Class",
          times: {
            "2": [
              {
                end: 54900,
                start: 48900,
              },
            ],
            "5": [
              {
                end: 54900,
                start: 48900,
              },
            ],
          },
          where: "Cargill Hall 097",
          endDate: 18969,
          startDate: 18878,
        },
      ],
    } as Section,
    algo2() {
      return {...this.algo2_base};
    },
    algo2_base: {
      classType: "Lecture",
      crn: "15730",
      seatsCapacity: 49,
      seatsRemaining: 1,
      waitCapacity: 0,
      waitRemaining: 0,
      lastUpdateTime: 1638994699283,
      campus: "Boston",
      honors: false,
      url: "https://wl11gp.neu.edu/udcprod8/bwckschd.p_disp_detail_sched?term_in=202210&crn_in=15730",
      profs: ["Andrew Van Der Poel"],
      meetings: [
        {
          type: "Final Exam",
          times: {
            "5": [
              {
                end: 54000,
                start: 46800,
              },
            ],
          },
          where: "TBA",
          endDate: 18978,
          startDate: 18978,
        },
        {
          type: "Class",
          times: {
            "2": [
              {
                end: 61500,
                start: 55500,
              },
            ],
            "5": [
              {
                end: 61500,
                start: 55500,
              },
            ],
          },
          where: "Knowles Center 010",
          endDate: 18969,
          startDate: 18878,
        },
      ],
    } as Section,
    algo3() {
      return {...this.algo3_base};
    },
    algo3_base: {
      classType: "Lecture",
      crn: "14051",
      seatsCapacity: 250,
      seatsRemaining: 30,
      waitCapacity: 0,
      waitRemaining: 0,
      lastUpdateTime: 1638994699283,
      campus: "Boston",
      honors: false,
      url: "https://wl11gp.neu.edu/udcprod8/bwckschd.p_disp_detail_sched?term_in=202210&crn_in=14051",
      profs: ["Rajmohan Rajaraman"],
      meetings: [
        {
          type: "Class",
          times: {
            "2": [
              {
                end: 41400,
                start: 35400,
              },
            ],
            "5": [
              {
                end: 41400,
                start: 35400,
              },
            ],
          },
          where: "Science Engineering Complex 102",
          endDate: 18969,
          startDate: 18878,
        },
        {
          type: "Final Exam",
          times: {
            "1": [
              {
                end: 54000,
                start: 46800,
              },
            ],
          },
          where: "TBA",
          endDate: 18974,
          startDate: 18974,
        },
      ],
    } as Section,
    algo1_times: new BinaryMeetingTime(
        18878,
        18969,

    ),
    algo1_parsed() {
        return { ...this.algo1(), "meetings": this.algo1_times };
    },
    algo1_minimal() {
        const parsed = {...this.algo1_parsed()};
        return { crn: parsed.crn, meetings: parsed.meetings };
    },
    algo2_times: new BinaryMeetingTime(
        18878,
        18969,
        "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
    ),
    algo2_parsed() {
        return { ...this.algo2(), "meetings": this.algo2_times };
    },
    algo2_minimal() {
        const parsed = this.algo2_parsed();
        return { crn: parsed.crn, meetings: parsed.meetings };
    },
    algo3_times: new BinaryMeetingTime(
        18878,
        18969,

    ),
    algo3_parsed() {
        return { ...this.algo3(), "meetings": this.algo3_times };
    },
    algo3_minimal() {
        const parsed = this.algo3_parsed();
        return { crn: parsed.crn, meetings: parsed.meetings };
    },
};
